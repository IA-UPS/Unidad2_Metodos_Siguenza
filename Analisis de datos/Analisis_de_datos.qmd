---
title: "Análisis de conjunto de datos"
author: "Juan Narváez - Daniela Sigüenza"
format: html
editor: visual
---

## Cargamos librerias

```{r}
library(glmnet)

library(ggplot2) 

library(dplyr) 

library(caret) 

library(e1071) 

library(ggstatsplot)
```

## Cargamos los datos

```{r}

# Cargar los datos
datos <- read.csv("./name_gender_dataset (1).csv")



datos$Gender<- ifelse(datos$Gender == "M", 1, 0)


datos.numericos <- datos[, which(unlist(lapply(datos, is.numeric)))]
#clase <- datos$Gender <- as.factor(datos$Gender)
colnames(datos.numericos) <- paste0("Var", rep(1:3))

#Vista previa de los registros
head(datos)


```

```{r}

```

```{r}
#Resumen estadistico de las variables
summary(datos)
```

```{r}
#Estructura de conjunto de datos
str(datos)
```

### Medidas de tendencia central

```{r}
#Calcular la media de una variable
mean(datos.numericos$Var2)
mean(datos.numericos$Var3)

#Calcular la mediana de una variable 
median(datos.numericos$Var2)
median(datos.numericos$Var3)
```

### Medidas de dispersión

```{r}
#Calcular la desviación estándar
sd(datos.numericos$Var2)
sd(datos.numericos$Var3)
#Calcular el rango de una variable
range(datos.numericos$Var2)
range(datos.numericos$Var3)
```

### Visualización de datos

##### Histogramas

```{r}
l.plots <- vector("list",length = ncol(datos.numericos)-1) #Primero se crea una lista que se llamará l.plots para almacenar las histogramas que se creen.

n1 <- ncol(datos.numericos) 


for(j in 1:n1){
  
  h <-hist(datos.numericos[,j],plot = F) #Cada columna tendra su propio histograma, para esto se utiliza la función hist, además se coloca un FALSE para evitar que los histogramas se visualicen de inmediato. 
  
  datos.tmp <- data.frame(value=datos.numericos[,j],outcome=datos.numericos$Var1) #la variable datos.tmp contendrá los datos de la columna actual y la variable Outcome. 
  
  p1 <- ggplot(datos.tmp,aes(value,fill=outcome))+geom_histogram(breaks=h$breaks) + ggtitle(paste("Histogram of", colnames(datos.numericos)[j]))
  
  l.plots[[j]] <- p1
}

```

```{r}
l.plots #Impreme una lista de los histogramas creados.
```

##### Correlación entre variables

```{r}
# obj.cor será la variable en donde se guarden los valores de correlación.
# la función psych::cor, permite el análisis de correlación.
obj.cor <- psych::corr.test(datos.numericos[,1:3]) 

p.values <- obj.cor$p #Aquí se guarda en la variable p.values los valores p calculados en el paso anterior.

p.values[upper.tri(p.values)] <- obj.cor$p.adj #se asignan valores a la mitad superior de la matriz.

p.values[lower.tri(p.values)] <- obj.cor$p.adj #se asignan valores a la mitad inferior de la matriz.

diag(p.values) <- 1 #Se establece el valor de 1 en la diagonal de la matriz de valores 

corrplot::corrplot(corr = obj.cor$r,p.mat = p.values,sig.level = 0.05,insig = "label_sig") #se crea un gráfico de correlación, especifíca un nivel de significancia de 0.05
```

##### Comparación entre variables

```{r}
ggbetweenstats(datos.numericos,Var1,Var2,type = "nonparametric") 


```

```{r}
ggbetweenstats(datos.numericos,Var1,Var3,type = "nonparametric")
```

```{r}
#Prueba de t de una muestra
t.test(datos.numericos$Var2, mu = 1)

```

```{r}
#Prueba de t de dos muestras 
t.test(datos.numericos$Var3 ~ datos$Gender,var.equal=T)
```

```{r}

#PCA
datos <- read.csv("./name_gender_dataset (1).csv")

summary(datos)
pcx <- prcomp(datos[,3:4],scale. = T) 

plotpca <- bind_cols(pcx$x,Genero=datos$Gender)
ggplot(plotpca,aes(PC1,PC2,color=Genero))+geom_point()

biplot(pcx)
```

#### Partición de datos

```{r}
datos.numericos[,1:3] <- as.data.frame(scale(datos.numericos[,-ncol(datos.numericos)]))
levels(datos.numericos$Var1) <- c("0","1")
train <- sample(nrow(datos.numericos),size = nrow(datos.numericos)*0.7)

dat.train <- datos.numericos[train,]
dat.test <- datos.numericos[-train,]
```

#### Modelado
